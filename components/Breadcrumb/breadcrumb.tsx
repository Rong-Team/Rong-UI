import React from "react"
import BreadSeperator from "./bread-seperator"
import BreadcrumbItem from "./breadcrumb-item";
import styled from "styled-components";

export interface Route {
    path: string;
    breadcrumbName: string;
    children?: Omit<Route, 'children'>[];
}

export interface BreadcrumbProps {
    routes?: Route[];
    params?: any;
    separator?: React.ReactNode;
    itemRender?: (
        route: Route,
        params: any,
        routes: Array<Route>,
        paths: Array<string>,
    ) => React.ReactNode;
    className?: string;
}
function getBreadcrumbName(route: Route, params: any) {
    if (!route.breadcrumbName) {
        return null;
    }
    const paramsKeys = Object.keys(params).join('|');
    const name = route.breadcrumbName.replace(
        new RegExp(`:(${paramsKeys})`, 'g'),
        (replacement, key) => params[key] || replacement,
    );
    return name;
}

function defaultItemRender(route: Route, params: any, routes: Route[], paths: string[]) {
    const isLastItem = routes.indexOf(route) === routes.length - 1;
    const name = getBreadcrumbName(route, params);
    return isLastItem ? <span>{name}</span> : <a href={`#/${paths.join('/')}`}>{name}</a>;
}

const getPath = (path: string, params: any) => {
    path = (path || '').replace(/^\//, '');
    Object.keys(params).forEach(key => {
        path = path.replace(`:${key}`, params[key]);
    });
    return path;
};

const Nav=styled.nav`
      margin: 0;
          padding: 0;
          line-height: inherit;
          color: #d9d9d9;
          font-size: 14px;
          box-sizing: border-box;
          display: flex;
          align-items: center;

          & > span:last-child {
    color: black;
    opacity:0.85;
    a {
      color: ${props=>props.theme.colors.primary};
    }
  }
`
interface BreadcrumbInterface extends React.FC<BreadcrumbProps> {
    Item: typeof BreadcrumbItem;
    Separator: typeof BreadSeperator;
  }

const Breadcrumb: BreadcrumbInterface = ({ separator = "/", className, children,routes,params,itemRender=defaultItemRender}) => {
    const childrenArray = React.Children.toArray(children)

    const withSeparatorChildren = childrenArray.map((item, index) => {
        if (!React.isValidElement(item)) return item
        const last = childrenArray[index - 1]
        const lastIsSeparator = React.isValidElement(last) && last.type === BreadSeperator
        const currentIsSeparator = item.type === BreadSeperator
        if (!lastIsSeparator && !currentIsSeparator && index > 0) {
            return (
                <React.Fragment key={index}>
                    <BreadSeperator>{separator}</BreadSeperator>
                    {item}
                </React.Fragment>
            )
        }
        return item
    })
    let crumbs
    if (routes && routes.length > 0) {
        // generated by route
        const paths: string[] = [];
        crumbs = routes.map(route => {
          const path = getPath(route.path, params);
    
          if (path) {
            paths.push(path);
          }
          // generated overlay by route.children
        //   let overlay;
        //   if (route.children && route.children.length) {
        //     overlay = (
        //       <Menu>
        //         {route.children.map(child => (
        //           <Menu.Item key={child.path || child.breadcrumbName}>
        //             {itemRender(child, params, routes, addChildPath(paths, child.path, params))}
        //           </Menu.Item>
        //         ))}
        //       </Menu>
        //     );
        //   }
    
          return (
            <BreadcrumbItem  key={path || route.breadcrumbName}>
              {itemRender(route, params, routes, paths)}
            </BreadcrumbItem>
          );
        });
      }else if (children) {
        crumbs=withSeparatorChildren
      }
      return (<Nav className={className}>
          {crumbs}
      </Nav>)

}
Breadcrumb.Item=BreadcrumbItem
Breadcrumb.Separator=BreadSeperator
export default Breadcrumb


